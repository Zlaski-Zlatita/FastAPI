from fastapi import FastAPI, HTTPExpection                  из библиотеки импортировать основной класс
from typing import Optional                                 Optional - новый класс в пакете java.util, является контейнером (оберткой) для значений которая также может безопасно содержать null,     
                                                            Модуль typing в Python предоставляет дополнительные средства для более точной и продвинутой типизации. 1 Он позволяет указывать типы переменных, полей класса, аргументов и возвращаемых значений функций. 2
                                                            Некоторые структуры данных из модуля typing:
                                                            Any — представляет неопределённый тип, используется, когда точно неизвестен тип переменной; 1
                                                            Union — позволяет указать несколько возможных типов для переменной; 1
                                                            Optional — указывает, что переменная может иметь значение определённого типа или быть None

app = FastAPI()                              создадим объект на основе этого класса


@app.get("/")                                описываем обработку url адресов, обращаемся к объекту обращаемся к url адресу, просто / означает, что мы обрабатываем главную страницу
async def home() -> list? int? dict{str, str} etc:                                  здесь же прописываем, что конкретно мы будем возвращать из нашей функции dict{ключ, знач-е}   + сделаем функции ассинхронными: результат выполнения функции доступен спустя некоторое время. 
    return "Hello world" или можно возвращать словарь {"data": "message"} ключ и значение или список {5? 6}           при переходе на главную страницу я хочу возвращать именно такой словарь
выполняем запуск всего проекта и переходим на главную страницу: в терминале обращаемся к библиотеке uvicorn main:app --reload это значит, что кажды раз, когда мы будем добавлять функцию в этот файл - сервер будет перезагружаться. Далее переходем по выданному в табеле url адресу - это ссылка на сайт
                    frontend часть - это клиентская часть, чтобы перейти на страницу с документацией переходим по url адресу /docs


@app.get("/contacts")
async def contacts() -> int:         при переходе по этому адресу я хочу вызывать функцию
        return 34


posts = [                     
     {'id': 1, 'title': 'News one', 'body': "Text 1"},
     {'id': 2, 'title': 'News one', 'body': "Text 1"},
     {'id': 3, 'title': 'News one', 'body': "Text 1"},
]

@app.get("/items") я хочу при переходе на страницу items возвращать страницу со всеми этими ключами
async def items() -> list[dict]: 
        eturn posts

ПОЗДРАВЛЯЮ! МЫ СОЗДАЛИ URL АДРЕС

теперь мы хотим создать только 1 функцию, тоисть укажем динамический парамеьтр(ссылку)

@app.get("/items/{id}")                в фигурных скобках указываем динамический параметр, можа обрабатывать через /{id}/{} сразу несколько параметров по очереди в 1й строке
async def items(id: int) -> dict:                     list[dict] - так можа записывать
        for post in posts              создадим цикл, переменная - post 
            if post['id'] == id:
              return post

        raise HTTPExpection(status_code=404, detail='Post doesn't exist')             чтобы создать ошибку, вверху обязательно подключаем класс с этой ошибкой, передаём также внутрь параметр, при переходе на страницу каталога мы возвращаем не весь список, а конкретный элемент, следовательно это не список, а словарь
        return posts


@app.get("/search")
async def search(post_id: Optional[int] = None) -> dict:       указываем опциональный параметр, для этого вверху подключаем дополнительный класс, и обращаемся к этому классу здесь, само значение по классу в поле будет передаваться через int, тоисть - какое будет передаваться значение по умолчанию? - ничего, т.к. поле нужно будет заполнить
      if post_id:                                              если передаётся
           for post in posts              
               if post['id'] == post_id:
                    raise HTTPExpection(status_code=404, detail='Post doesn't exist')   
      else:                                                    в случае, если не передаётся
            return {"data": "Theere's no post id provided"}
