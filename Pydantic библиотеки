Тип данных - int? str? list? dict

from fastapi import FastAPI, HTTPExpection               
from typing import Optional, List, Dict 
from pydentic import BaseModel                                                             то шо мы буим из библиотеки pydentic импортировать класс BaseModel

app = FastAPI() 


class User(BaseModel):                      сщздадим класс, к-й будет описывать пользователей
             id: int                        прописываем поля, к-е будут соответствовать любому нашему пользователю
             name: str
             age: int

class Post(BaseModel):                                                                     создаём нновый класс и указываем, что он наследует всё из класса BaseModel
         id: int                                                                           общая структура будет состоять из ключей для каждого поста(ниже)
         title: str
         body: str
         author: User

users = [
            {id: 1, ; 'name': 'John', 'age': 34},               новая переменная: у каждого пользователя есть -
            {id: 2, ; 'name': 'John', 'age': 3},
            {id: 3, ; 'name': 'John', 'age': 4},
]

posts = [                     
     {'id': 1, 'title': 'News one', 'body': "Text 1", 'author': users[1]},
     {'id': 2, 'title': 'News one', 'body': "Text 1", 'author': users[2]},
     {'id': 3, 'title': 'News one', 'body': "Text 1", 'author': users[3]},
]

@app.get("/items")
async def items() -> list[Post]:                                                            допустим данная функция будет возвращать конкретно ту структуру с ключами выше, и она возвращает не просто список с элементами, а именно на основе класса Post, также можно из типа данных передать это в класс Listn posts
           post_objects = []
           for post in posts:
           post_objects.append(Post(id=post['id'], title=post[title], body=post[body]))    обращаемся к post_objects, append тоисть мы постоянно будем что-то добавлять в этот список, обращаюсь к классу и создаю объект на его основе, в качестве знач-я мы обращаемся к id, в поле знач-я будем подставлять post, тоисть беру каждый пост и из него вытягиваю ключи 
           return post_objects

как можно сократить предыдущий блок:
@app.get("/items")
async def items() -> list[Post]:
           return [Post(**post) for post in posts]              возвращая список, я передаю список, внутри ко-го указываю класс, передавая далее цикл, и для того, чтобы указать, что каждый отдельный post кот-й мы оборачиваем в класс - в скобках указываем, т.к. мы понимаем, что теперь каждыйэл-т будет точно соответствовать структуре скрипта с ключами под накзванием posts(gthtvtyyfz)

 

@app.get("/items/{id}")              
async def items(id: int) -> Post:                       здесь передаём класс         
        for post in posts:            
            if post['id'] == id:
              return Post(**post)                               возвращаем класс, и указываем в (), что определённый пост, к-й мы нашли, мы конвертируем в класс

        raise HTTPExpection(status_code=404, detail='Post doesn't exist')          
        return posts


@app.get("/search")
async def search(post_id: Optional[int] = None) -> Dict{str, Optional{Post}}:      в pydantic лучше передавать классы, знач-е  в виде опционального параметра, Optional -класс, к-й может передавать существующие или несуществующие знач-я
      if post_id:                                             
           for post in posts              
               if post['id'] == post_id:
                          return {"data": Post(**post)}
                    raise HTTPExpection(status_code=404, detail='Post doesn't exist')   
      else:                                                    
            return {"data": None}                                                   в сравнении: тут 2 return, следовательно, 1й случай: мы возвратили запись по образцу - 2й случай: 
